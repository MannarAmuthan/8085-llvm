//===-- I8085Subtarget.h - Define Subtarget for the I8085 -----------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the I8085 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_I8085_SUBTARGET_H
#define LLVM_I8085_SUBTARGET_H

#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#include "I8085FrameLowering.h"
#include "I8085ISelLowering.h"
#include "I8085InstrInfo.h"
#include "I8085SelectionDAGInfo.h"

#define GET_SUBTARGETINFO_HEADER
#include "I8085GenSubtargetInfo.inc"

namespace llvm {

/// A specific I8085 target MCU.
class I8085Subtarget : public I8085GenSubtargetInfo {
public:
  //! Creates an I8085 subtarget.
  //! \param TT  The target triple.
  //! \param CPU The CPU to target.
  //! \param FS  The feature string.
  //! \param TM  The target machine.
  I8085Subtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
               const I8085TargetMachine &TM);

  const I8085InstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const I8085TargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const I8085SelectionDAGInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const I8085RegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }

  /// Parses a subtarget feature string, setting appropriate options.
  /// \note Definition of function is auto generated by `tblgen`.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  I8085Subtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                const TargetMachine &TM);

  /// Gets the ELF architecture for the e_flags field
  /// of an ELF object file.
  unsigned getELFArch() const {
    assert(ELFArch != 0 &&
           "every device must have an associate ELF architecture");
    return ELFArch;
  }

private:
  /// The ELF e_flags architecture.
  unsigned ELFArch;

  I8085InstrInfo InstrInfo;
  I8085FrameLowering FrameLowering;
  I8085TargetLowering TLInfo;
  I8085SelectionDAGInfo TSInfo;
};

} // end namespace llvm

#endif // LLVM_I8085_SUBTARGET_H
